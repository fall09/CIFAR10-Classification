# -*- coding: utf-8 -*-
"""cifar-10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VrZ7GYkFKFuglLFHGZBsUnPHsXbqpani
"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
import matplotlib.pyplot as plt
import numpy as np

# CIFAR-10 dataset
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data()

# class names
class_names = ['Airplane', 'Automobile', 'Bird', 'Cat', 'Deer',
               'Dog', 'Frog', 'Horse', 'Ship', 'Truck']

# data normalization
x_train = x_train / 255.0
x_test = x_test / 255.0

# CNN model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),  # 1st convolutional layer
    MaxPooling2D((2, 2)),  # max pooling
    Conv2D(64, (3, 3), activation='relu'),  # 2nd convolutional layer
    MaxPooling2D((2, 2)),  # max pooling
    Flatten(),
    Dense(128, activation='relu'),  # fully conneted layer
    Dense(10, activation='softmax')  # output layer
])

# Model compilation
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Model summary
model.summary()

# Model training
history = model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test), batch_size=64)

# Model accuracy
test_loss, test_accuracy = model.evaluate(x_test, y_test, verbose=2)
print(f"Test Accuracy: {test_accuracy:.4f}")

# graphs
plt.figure(figsize=(12, 4))

# Kloss praph
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Loss over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

# accuracy graph
plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Accuracy over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

plt.show()

# Model save
model.save("cifar10_cnn_model.h5")
print("Model saved successfully.")

from tensorflow.keras.models import load_model

# load model
loaded_model = load_model("cifar10_cnn_model.h5")
print("Model loaded successfully.")

import numpy as np
import matplotlib.pyplot as plt

#  choose picture from test set
index = 12
test_image = x_test[index]
true_label = class_names[y_test[index][0]]

# visualize chosen pic
plt.imshow(test_image)
plt.title(f"True Label: {true_label}")
plt.axis('off')
plt.show()


test_image_expanded = np.expand_dims(test_image, axis=0)  # (1, 32, 32, 3)

# predict
predicted_probs = loaded_model.predict(test_image_expanded)
predicted_label = class_names[np.argmax(predicted_probs)]

print(f"Model ÄŸrediction: {predicted_label}")

from google.colab import files

# upload pic
uploaded = files.upload()

# check for files
for filename in uploaded.keys():
    print(f"uploaded pic: {filename}")

from PIL import Image
import numpy as np
import matplotlib.pyplot as plt


image_path = "uploadedimage.png"  # you can change it

# open pic and convert
test_image = Image.open(image_path).convert("RGB").resize((32, 32))

# visualize
plt.imshow(test_image)
plt.title("Uploaded Image")
plt.axis('off')
plt.show()


test_image_array = np.array(test_image) / 255.0  # Normalization
test_image_array = np.expand_dims(test_image_array, axis=0)  # (1, 32, 32, 3)

from tensorflow.keras.models import load_model


model = load_model("cifar10_cnn_model.h5")


predicted_probs = model.predict(test_image_array)
predicted_label = np.argmax(predicted_probs)


class_names = ['Airplane', 'Automobile', 'Bird', 'Cat', 'Deer',
               'Dog', 'Frog', 'Horse', 'Ship', 'Truck']


print(f"Predicted Class: {class_names[predicted_label]}")